<?php
/**
 * Enqueue theme assets.
 *
 * @package Blank-Theme
 */

namespace BLANK_THEME\Inc;

use Blank_Theme\Inc\Traits\Singleton;

/**
 * Class Assets
 */
class Assets {

	use Singleton;

	/**
	 * Holds generated hashed asset paths.
	 *
	 * @var array
	 */
	protected $asset_paths;

	/**
	 * Construct method.
	 */
	protected function __construct() {

		// Set asset paths before attaching any filters.
		$this->asset_paths = $this->get_asset_paths();

		$this->_setup_hooks();
	}

	/**
	 * To register action/filter.
	 *
	 * @return void
	 */
	protected function _setup_hooks() {

		/**
		 * Actions
		 */
		add_action( 'wp_enqueue_scripts', [ $this, 'register_scripts' ] );
		add_action( 'wp_enqueue_scripts', [ $this, 'register_styles' ] );

	}

	/**
	 * Register scripts.
	 *
	 * @action wp_enqueue_scripts
	 */
	public function register_scripts() {

		wp_register_script( 'blank-theme-main', $this->get_asset_file_uri( 'main.js' ), [ 'jquery' ], filemtime( $this->get_asset_file_path( 'main.js' ) ), true );
		wp_register_script( 'blank-theme-home', $this->get_asset_file_uri( 'home.js' ), [ 'jquery' ], filemtime( $this->get_asset_file_path( 'home.js' ) ), true );
		wp_register_script( 'blank-theme-single', $this->get_asset_file_uri( 'single.js' ), [ 'jquery' ], filemtime( $this->get_asset_file_path( 'single.js' ) ), true );

		wp_enqueue_script( 'blank-theme-main' );

		if ( is_home() ) {
			wp_enqueue_script( 'blank-theme-home' );
		}

		if ( is_single() ) {
			wp_enqueue_script( 'blank-theme-single' );
		}

		if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
			wp_enqueue_script( 'comment-reply' );
		}

	}

	/**
	 * Register styles.
	 *
	 * @action wp_enqueue_scripts
	 */
	public function register_styles() {

		wp_register_style( 'blank-theme-main', $this->get_asset_file_uri( 'main.css' ), [], filemtime( $this->get_asset_file_path( 'main.css' ) ) );
		wp_register_style( 'blank-theme-home', $this->get_asset_file_uri( 'home.css' ), [ 'blank-theme-main' ], filemtime( $this->get_asset_file_path( 'home.css' ) ) );
		wp_register_style( 'blank-theme-single', $this->get_asset_file_uri( 'single.css' ), [ 'blank-theme-main' ], filemtime( $this->get_asset_file_path( 'single.css' ) ) );

		wp_enqueue_style( 'blank-theme-main' );

		if ( is_home() ) {
			wp_enqueue_style( 'blank-theme-home' );
		}

		if ( is_single() ) {
			wp_enqueue_style( 'blank-theme-single' );
		}
	}

	/**
	 * Get the current assets - hash mapping.
	 *
	 * Reads 'manifest.json' file generated by the build process.
	 *
	 * @return bool|void
	 */
	public function get_asset_paths() {

		// Define the URL.
		$url = sprintf( '%s/manifest.json', untrailingslashit( BLANK_THEME_BUILD_URI ) );

		// Make the request.
		$request = wp_remote_get( $url );

		// If the remote request fails, wp_remote_get() will return a WP_Error, so letâ€™s check if the $request variable is an error.
		if ( is_wp_error( $request ) ) {
			return false; // Bail early.
		}

		// Retrieve the data.
		$body = wp_remote_retrieve_body( $request );
		$data = json_decode( $body, true );

		return $data;
	}

	/**
	 * Returns file URI to be used for registering an asset.
	 *
	 * @param string $file Asset key to map with the 'manifest.json'.
	 *
	 * @return string
	 */
	public function get_asset_file_uri( $file ) {

		return sprintf( '%s/%s', untrailingslashit( BLANK_THEME_BUILD_URI ), $this->asset_paths[ $file ] );

	}

	/**
	 * Returns file Path to be used for getting file modification time while registering an asset.
	 * for version mainly.
	 *
	 * @param string $file Asset key to map with the 'manifest.json'.
	 *
	 * @return string
	 */
	public function get_asset_file_path( $file ) {

		return sprintf( '%s/%s', untrailingslashit( BLANK_THEME_BUILD_DIR ), $this->asset_paths[ $file ] );

	}

}
